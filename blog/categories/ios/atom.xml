<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: iOS | Nils Hayat]]></title>
  <link href="http://nilsou.github.io/blog/categories/ios/atom.xml" rel="self"/>
  <link href="http://nilsou.github.io/"/>
  <updated>2013-07-29T09:05:20+03:00</updated>
  <id>http://nilsou.github.io/</id>
  <author>
    <name><![CDATA[Nils Hayat]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to have two versions of the same app on your device]]></title>
    <link href="http://nilsou.github.io/blog/2013/07/29/how-to-have-two-versions-of-the-same-app-on-your-device/"/>
    <updated>2013-07-29T07:59:00+03:00</updated>
    <id>http://nilsou.github.io/blog/2013/07/29/how-to-have-two-versions-of-the-same-app-on-your-device</id>
    <content type="html"><![CDATA[<p>You have <em>v1</em> of your great app in the App Store, and therefore on all your devices. You are now starting to work on <em>v1.1</em>. The problem is that if you just bump the version number and keep building/provisioning with your current settings, when you install it on your device, it will replace the App Store version.</p>

<p>In this article, I am going to explain how to get both the currently released version of your app and the development build you are working on the same device easily. I am also going to explain how to have 2 different icons for them so that you can tell them apart.</p>

<!--more-->


<h3>Create 2 different App IDs</h3>

<p>When you install an App, in order to determine if you are trying to install a new app or to update an app already installed, the device compares their App IDs.</p>

<p>So the first thing to do is to go in the provisioning center and create a second App ID for the development version of your app so that the device will be able to keep the two versions of your app.</p>

<p>If your App Store app has the App ID <code>com.mycompany.myapp</code> I suggest you create <code>com.mycompany.myapp-beta</code> or <code>com.mycompany.myapp-dev</code>.</p>

<p>While you&rsquo;re in there also create a provisioning profile for that new App ID.</p>

<h3>Create a different icon for the development version</h3>

<p>In order to differentiate the 2 versions when they are on my device, I use 2 different icons. The beta version has a black and yellow <em>work in progress</em> banner at the top left.</p>

<p><img src="http://f.cl.ly/items/1g0n2k3i2Z2f1u10423F/Beta-next-to-release.jpg" alt="Beta next to release" /></p>

<p>The first time I saw that technique used it was on a springboard screenshot of <a href="http://twitter.com/viticci">Federico Viticci</a>&rsquo;s phone where he had a development version of <a href="http://tapbots.com/software/tweetbot/">Tweetbot</a>.</p>

<p>I created a PSD template to create those development icons, here it is: <a href="http://cl.ly/3x1Y0s0q2m3T/download/App%20Icon%20Beta%20Overlay.psd">App-icon-beta-overlay</a></p>

<p>Name your icons <code>Icon.png</code>, <code>Icon@2x.png</code>, <code>Icon-beta.png</code> and <code>Icon-beta@2x.png</code>.</p>

<h3>Have separate Build configurations</h3>

<p>By default, Xcode creates 2 build configurations for you: <em>Debug</em> and <em>Release</em>. I like to add a third one, <em>AppStore</em>. I use them as follow:</p>

<ul>
<li>Debug: when I work and put the app on the device directly from Xcode.</li>
<li>Release: When I package the app as an ipa + plist and put it on our Over-the-air distribution system. (Similar to test flight but much simpler)</li>
<li>AppStore: I use this configuration when creating the builds that are submitted to the App Store.</li>
</ul>


<h3>Put it all together</h3>

<h4>User-Defined build settings</h4>

<p>Now we need to setup the project so tat it will use the correct App ID and icon for each configuration.</p>

<p>To do so, go in your project&rsquo;s Build Settings and scroll all the way down. Add a User-defined setting that you call <code>BUNDLE_IDENTIFIER</code> and another one that you call <code>APP_ICON_NAME</code>. Set the values for each build configuration as in the following screenshot:</p>

<p><img src="http://f.cl.ly/items/3v3T3W230B1v2K0M2m1c/Screen%20Shot%202013-07-23%20at%2011.12.16%20AM.png" alt="Project Settings screenshot" /></p>

<p>Now we need to tell Xcode to use these settings when building your app</p>

<h4>Info.plist</h4>

<p>Open the info.plist file for your project (It&rsquo;s in Supporting files and is called MyApp-Info.plist).</p>

<p>There under bundle identifier, replace the bundle identifier that you currently have with <code>${BUNDLE_IDENTIFIER}</code></p>

<p>Also open the Icon files drop down and make sure the 2 options you have are <code>${APP_ICON_NAME}@2x.png</code> and <code>${APP_ICON_NAME}.png</code>.</p>

<p>The <code>${…}</code> syntax is the pre-processor syntax: the first phase of any build starts with the pre-processor going over all the files and replacing these <code>${…}</code> with the values to what they are set.</p>

<h3>Conclusion</h3>

<p>This lets you with a project that will automatically use the beta App ID and icon when you are building for testing but that will also use the regular App ID and icon when you make a build for the App Store.</p>

<p>Using pre-processor macros you can also access those settings from your code to set different parameters for different configurations.</p>

<p>You can take it now step further and define more build configuration. Let&rsquo;s say your app connects to an API and you want some builds to point to the production server and some others to point to a development server, you can use this method to point them to the right URL and give them a different icon automatically!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Open source Objective-C code with Github and CocoaPods]]></title>
    <link href="http://nilsou.github.io/blog/2013/07/21/how-to-open-source-objective-c-code/"/>
    <updated>2013-07-21T16:33:00+03:00</updated>
    <id>http://nilsou.github.io/blog/2013/07/21/how-to-open-source-objective-c-code</id>
    <content type="html"><![CDATA[<p>Last week I decided to open source some classes that I have written and that I reuse often in apps so that other developers can benefit from them. This post has 3 parts: first I talk about how to format you code/project to make it useful to other developers. Then I explain how to put it on Github. And finally I describe what to do to make it available through <a href="http://cocoapods.org">CocoaPods</a>.</p>

<!-- more -->


<h3>Make that project look good</h3>

<h4>Clean up the code itself</h4>

<p>As always when writing code that other people are going to read, you want it to be as clean as possible. Here are a few tips:</p>

<ul>
<li>Removing all commented code that you have left in there.</li>
<li>Name your variables and methods with names that are legible and easy to understand.</li>
<li>Split big methods in multiple small methods (a good guideline is ~25 lines max per method)</li>
<li>Comment the hell of your header file. (This is the only thing that most people using your code will read)</li>
</ul>


<h4>Organize the project</h4>

<p>Often you want to share just a few classes but it is a good idea to include a Demo project so that people can understand how your classes are intended to be used.</p>

<p>Have the files of interest in a folder and the files for the demo project in a different one so as not to confuse your user.</p>

<p>You want the project file to reflect the organization of the project folder:</p>

<p><img src="http://farm8.staticflickr.com/7397/9340191112_5dda8d0ecd_o.png" alt="project organization" /></p>

<p><img src="http://farm4.staticflickr.com/3692/9337404169_20a9e4740a_o.png" alt="project folder" /></p>

<p>Here the class I want to share is <code>NHAlignmentLayout</code> the rest of the files are there to demonstrate how to use it.</p>

<h4>Include a README</h4>

<p>Right an explicit readme with code samples and even screenshots, that will be the homepage for your repo and will likely be the decisive point for if someone who comes to your project will end up using it or not.
Include explicit instructions on how to install you classes (Most likely using <a href="http://cocoapods.org">CocoaPods</a>.</p>

<h4>Include a LICENSE</h4>

<p>When you open source some of your work, you need to define what people can and cannot do with it. This is the role of a license. There are many open-source licenses such as MIT, GNU, and BSD… You can find which one is best for you by going to <a href="http://choosealicense.com/">Choose A License</a>. This site made by Github will help you find the best license for you.</p>

<h3>Put it on Github</h3>

<h4>Create the Repository</h4>

<p>Go to your Github account and create a new repository for your project. Name it with a name that makes sense; don&rsquo;t name it <code>XXSomethingDemo</code> but rather <code>XXSomething</code> as this is what everybody cares about.
Check the option to add a .gitignore file and choose Objective-C.</p>

<h4>Clone the empty repository on your computer</h4>

<p>Clone the repo you just created in a temp folder on your mac. You don&rsquo;t want to add the repo as a remote for your current git repo in order to start with a fresh repo and a beautiful <em>Initial Commit</em>.</p>

<p><code>
git clone https://github.com/nilsou/NHAlignmentLayout.git
</code></p>

<h4>Copy and Paste your project to that folder</h4>

<p>Copy and paste your project files to that folder. You want to have the .xcodeproj file at the root of the repo. Do not put everything in a folder as the only thing it will do is annoy you users.</p>

<h4>Commit and Push</h4>

<p>Add your newly added files to git, commit and push to github.
<code>
git add .
git commit -a -m "Initial Commit"
git push origin master
</code></p>

<p>Your project is now open-sourced and people can start using it! But for it to be really easy to use and install you want to make it available on <a href="http://cocoapods.org">CocoaPods</a>.</p>

<h3>CocoaPods</h3>

<p>CocoaPods is to Objective-C what gems are to Ruby. You can list in the root of your project the &ldquo;pods&rdquo; you need and CocoaPods will download them and install them for you.</p>

<p>Start by installing CocoaPods if it is not already installed on your mac.</p>

<h4>Create the .podspec file.</h4>

<p>You need to create at the root of your repo a file that is a recipe for CocoaPods to use your classes.</p>

<p>Navigate to your project folder in a terminal window and ask CocoaPods to create a staring pod spec for you:
<code>
pod spec create NHSlidingController
</code></p>

<p>Open that file and start filling it with the information on your project.</p>

<p>It is important to use a version number. I usually start with 0.1.0 but this is up to you.</p>

<p>The <code>source</code> line is also important it is the line that tells CocoaPods where your project resides on the internet.</p>

<p><code>ruby
s.source = { :git =&gt; "https://github.com/nilsou/NHAlignmentFlowLayout.git", :tag =&gt; "0.1.0" }
</code></p>

<p>You also need to tell CocoaPods which files in your repo are relevant so that it does not copy any unneeded demo/example file.</p>

<p><code>ruby
s.source_files = 'NHAlignmentFlowLayout/*.{h,m}'
</code></p>

<h4>Validate the .podspec file</h4>

<p>Then we are going to verify the validity of your .podspec file.</p>

<p>You noticed that in <code>s.source</code> we point to a specific tag in our repo. You need to create a tag for CocoaPods to be able to find your code. A tag is an absolute reference across branches to a state of your code in time. They&rsquo;re often used for versioning and that&rsquo;s what CocoaPods use them for.</p>

<p>Create the tag locally and then push it to Github. In your terminal window enter:
<code>
git tag 0.1.0 -m "0.1.0 - Initial release"
git push origin master -tags
</code></p>

<p>Then you want to make sure that you .podspec file works. To do so use the <code>pod spec lint command</code>.
<code>
pod spec lint NHAlignmentFlowLayout.podspec
</code></p>

<p>This will try to download the pod you just created from the address you supplied in the podspec file. You should get something like this:
<code>
NHAlignmentFlowLayout.podspec passed validation.
</code></p>

<p>Commit that file to git and push it to Github.
<code>
git add .
git commit -a -m "Added .podspec file"
git push origin master
</code></p>

<h4>Add you .podspec to the master Specs repo</h4>

<p>All .podspecs files are kept in a central to repo called Specs. You need to fork that repo, add your pod specs to it and then issue a pull request for it to be merged. Don’t worry it&rsquo;s really easy.</p>

<h5>Fork the Specs Repo and clone it to your mac</h5>

<p>Go to the <a href="https://github.com/CocoaPods/Specs">Specs Github Repo</a> and Press the Fork Button on the top right corner. This will create a copy of the Specs repo in your account.</p>

<p>Clone the forked repo on you computer to be able to modify it.
<code>
git clone https://github.com/nilsou/Specs.git
</code></p>

<h5>Add your .podspec and push it to your fork</h5>

<p>Create a folder named with the name of you pod. for me it is <code>NHAlignmentLayout</code>
Create a subfolder with the name of your tag <code>0.1.0</code> for me.
Copy the .podspec file you created earlier in that folder.</p>

<p>Commit and push your changes to you forked repo:
<code>
git add .
git commit -a -m "Added NHAlignmentLayout"
git push origin master
</code></p>

<h5>Create the pull request</h5>

<p>Go to the forked Specs repo on github. Press the Comparison button, next to the name of the current branch. :</p>

<p><img src="http://farm6.staticflickr.com/5479/9340191074_1a6f3ae4d0_o.png" alt="Pull request button" /></p>

<p>This will initiate the comparison between your current repo and the original repo.</p>

<p>Review the changes, you should see the content of you .podspec file in green, meaning that this was added.</p>

<p>Press the <code>Click to create a pull request for this comparison</code> Button.</p>

<p><img src="http://farm3.staticflickr.com/2874/9337404161_38396a3a23_o.png" alt="Click to create a pull request for this comparison" /></p>

<p>This will send a pull request to the owners of the Specs repo. They are usually <em>extremely</em> quick to merge the pull request!</p>

<p>Once your pull request is approved you can start using your pod in other projects.</p>

<p>Now, go share your code!</p>
]]></content>
  </entry>
  
</feed>
